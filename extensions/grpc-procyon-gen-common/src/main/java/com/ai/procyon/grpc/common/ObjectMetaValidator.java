// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common.proto

package com.ai.procyon.grpc.common;

/**
* Validates {@code ObjectMeta} protobuf objects.
*/
public class ObjectMetaValidator implements io.envoyproxy.pgv.ValidatorImpl<com.ai.procyon.grpc.common.ObjectMeta>{
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		if (clazz.equals(com.ai.procyon.grpc.common.ObjectMeta.class)) return new ObjectMetaValidator();
		
		return null;
	}
		
	
		
		com.google.re2j.Pattern TENANT__PATTERN = com.google.re2j.Pattern.compile("^[a-z0-9][a-z0-9-]*$");
	
		
		com.google.re2j.Pattern NAMESPACE__PATTERN = com.google.re2j.Pattern.compile("^[a-zA-Z0-9_= :.@!~+-]*$");
	
		
		com.google.re2j.Pattern NAME__PATTERN = com.google.re2j.Pattern.compile("^[a-zA-Z0-9_= :.@*!~+-]*$");
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	

	public void assertValid(com.ai.procyon.grpc.common.ObjectMeta proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Kind

	
			io.envoyproxy.pgv.StringValidation.maxLength(".model.ObjectMeta.Tenant", proto.getTenant(), 256);
			io.envoyproxy.pgv.StringValidation.pattern(".model.ObjectMeta.Tenant", proto.getTenant(), TENANT__PATTERN);
	
			io.envoyproxy.pgv.StringValidation.maxLength(".model.ObjectMeta.Namespace", proto.getNamespace(), 256);
			io.envoyproxy.pgv.StringValidation.pattern(".model.ObjectMeta.Namespace", proto.getNamespace(), NAMESPACE__PATTERN);
	
			io.envoyproxy.pgv.StringValidation.maxLength(".model.ObjectMeta.Name", proto.getName(), 256);
			io.envoyproxy.pgv.StringValidation.pattern(".model.ObjectMeta.Name", proto.getName(), NAME__PATTERN);
	// no validation rules for ID

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	
			// Validate WrOwners
			if (proto.hasWrOwners()) index.validatorFor(proto.getWrOwners()).assertValid(proto.getWrOwners());
	
			// Validate RdOwners
			if (proto.hasRdOwners()) index.validatorFor(proto.getRdOwners()).assertValid(proto.getRdOwners());
	// no validation rules for UUID

	
			// Validate Labels
			if (proto.hasLabels()) index.validatorFor(proto.getLabels()).assertValid(proto.getLabels());
	// no validation rules for RevisionID

	// no validation rules for QueryParam

	
	}

}

