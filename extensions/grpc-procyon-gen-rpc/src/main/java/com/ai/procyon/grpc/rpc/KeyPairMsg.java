// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notary.proto

package com.ai.procyon.grpc.rpc;

/**
 * Protobuf type {@code rpc.KeyPairMsg}
 */
public final class KeyPairMsg extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:rpc.KeyPairMsg)
    KeyPairMsgOrBuilder {
private static final long serialVersionUID = 0L;
  // Use KeyPairMsg.newBuilder() to construct.
  private KeyPairMsg(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private KeyPairMsg() {
    keyID_ = "";
    keyToken_ = "";
    keyType_ = "";
    publicKey_ = "";
    sSHPublicKey_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new KeyPairMsg();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private KeyPairMsg(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            String s = input.readStringRequireUtf8();

            keyID_ = s;
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();

            keyToken_ = s;
            break;
          }
          case 26: {
            String s = input.readStringRequireUtf8();

            keyType_ = s;
            break;
          }
          case 34: {
            String s = input.readStringRequireUtf8();

            publicKey_ = s;
            break;
          }
          case 42: {
            String s = input.readStringRequireUtf8();

            sSHPublicKey_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return RPCProto.internal_static_rpc_KeyPairMsg_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return RPCProto.internal_static_rpc_KeyPairMsg_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            KeyPairMsg.class, Builder.class);
  }

  public static final int KEYID_FIELD_NUMBER = 1;
  private volatile Object keyID_;
  /**
   * <pre>
   * unique key id of the key-pair
   * </pre>
   *
   * <code>string KeyID = 1;</code>
   * @return The keyID.
   */
  @Override
  public String getKeyID() {
    Object ref = keyID_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      keyID_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * unique key id of the key-pair
   * </pre>
   *
   * <code>string KeyID = 1;</code>
   * @return The bytes for keyID.
   */
  @Override
  public com.google.protobuf.ByteString
      getKeyIDBytes() {
    Object ref = keyID_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      keyID_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int KEYTOKEN_FIELD_NUMBER = 2;
  private volatile Object keyToken_;
  /**
   * <pre>
   * token to access this key-id 
   * </pre>
   *
   * <code>string KeyToken = 2;</code>
   * @return The keyToken.
   */
  @Override
  public String getKeyToken() {
    Object ref = keyToken_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      keyToken_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * token to access this key-id 
   * </pre>
   *
   * <code>string KeyToken = 2;</code>
   * @return The bytes for keyToken.
   */
  @Override
  public com.google.protobuf.ByteString
      getKeyTokenBytes() {
    Object ref = keyToken_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      keyToken_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int KEYTYPE_FIELD_NUMBER = 3;
  private volatile Object keyType_;
  /**
   * <pre>
   * key type (rsa, ecdsa)
   * </pre>
   *
   * <code>string KeyType = 3;</code>
   * @return The keyType.
   */
  @Override
  public String getKeyType() {
    Object ref = keyType_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      keyType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * key type (rsa, ecdsa)
   * </pre>
   *
   * <code>string KeyType = 3;</code>
   * @return The bytes for keyType.
   */
  @Override
  public com.google.protobuf.ByteString
      getKeyTypeBytes() {
    Object ref = keyType_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      keyType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PUBLICKEY_FIELD_NUMBER = 4;
  private volatile Object publicKey_;
  /**
   * <pre>
   * public key 
   * </pre>
   *
   * <code>string PublicKey = 4;</code>
   * @return The publicKey.
   */
  @Override
  public String getPublicKey() {
    Object ref = publicKey_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      publicKey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * public key 
   * </pre>
   *
   * <code>string PublicKey = 4;</code>
   * @return The bytes for publicKey.
   */
  @Override
  public com.google.protobuf.ByteString
      getPublicKeyBytes() {
    Object ref = publicKey_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      publicKey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SSHPUBLICKEY_FIELD_NUMBER = 5;
  private volatile Object sSHPublicKey_;
  /**
   * <pre>
   * ssh public key
   * </pre>
   *
   * <code>string SSHPublicKey = 5;</code>
   * @return The sSHPublicKey.
   */
  @Override
  public String getSSHPublicKey() {
    Object ref = sSHPublicKey_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      sSHPublicKey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * ssh public key
   * </pre>
   *
   * <code>string SSHPublicKey = 5;</code>
   * @return The bytes for sSHPublicKey.
   */
  @Override
  public com.google.protobuf.ByteString
      getSSHPublicKeyBytes() {
    Object ref = sSHPublicKey_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      sSHPublicKey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getKeyIDBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, keyID_);
    }
    if (!getKeyTokenBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, keyToken_);
    }
    if (!getKeyTypeBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, keyType_);
    }
    if (!getPublicKeyBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, publicKey_);
    }
    if (!getSSHPublicKeyBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, sSHPublicKey_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getKeyIDBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, keyID_);
    }
    if (!getKeyTokenBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, keyToken_);
    }
    if (!getKeyTypeBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, keyType_);
    }
    if (!getPublicKeyBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, publicKey_);
    }
    if (!getSSHPublicKeyBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, sSHPublicKey_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof KeyPairMsg)) {
      return super.equals(obj);
    }
    KeyPairMsg other = (KeyPairMsg) obj;

    if (!getKeyID()
        .equals(other.getKeyID())) return false;
    if (!getKeyToken()
        .equals(other.getKeyToken())) return false;
    if (!getKeyType()
        .equals(other.getKeyType())) return false;
    if (!getPublicKey()
        .equals(other.getPublicKey())) return false;
    if (!getSSHPublicKey()
        .equals(other.getSSHPublicKey())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + KEYID_FIELD_NUMBER;
    hash = (53 * hash) + getKeyID().hashCode();
    hash = (37 * hash) + KEYTOKEN_FIELD_NUMBER;
    hash = (53 * hash) + getKeyToken().hashCode();
    hash = (37 * hash) + KEYTYPE_FIELD_NUMBER;
    hash = (53 * hash) + getKeyType().hashCode();
    hash = (37 * hash) + PUBLICKEY_FIELD_NUMBER;
    hash = (53 * hash) + getPublicKey().hashCode();
    hash = (37 * hash) + SSHPUBLICKEY_FIELD_NUMBER;
    hash = (53 * hash) + getSSHPublicKey().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static KeyPairMsg parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static KeyPairMsg parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static KeyPairMsg parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static KeyPairMsg parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static KeyPairMsg parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static KeyPairMsg parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static KeyPairMsg parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static KeyPairMsg parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static KeyPairMsg parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static KeyPairMsg parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static KeyPairMsg parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static KeyPairMsg parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(KeyPairMsg prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code rpc.KeyPairMsg}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:rpc.KeyPairMsg)
      KeyPairMsgOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RPCProto.internal_static_rpc_KeyPairMsg_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RPCProto.internal_static_rpc_KeyPairMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              KeyPairMsg.class, Builder.class);
    }

    // Construct using com.ai.procyon.grpc.rpc.KeyPairMsg.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      keyID_ = "";

      keyToken_ = "";

      keyType_ = "";

      publicKey_ = "";

      sSHPublicKey_ = "";

      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return RPCProto.internal_static_rpc_KeyPairMsg_descriptor;
    }

    @Override
    public KeyPairMsg getDefaultInstanceForType() {
      return KeyPairMsg.getDefaultInstance();
    }

    @Override
    public KeyPairMsg build() {
      KeyPairMsg result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public KeyPairMsg buildPartial() {
      KeyPairMsg result = new KeyPairMsg(this);
      result.keyID_ = keyID_;
      result.keyToken_ = keyToken_;
      result.keyType_ = keyType_;
      result.publicKey_ = publicKey_;
      result.sSHPublicKey_ = sSHPublicKey_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof KeyPairMsg) {
        return mergeFrom((KeyPairMsg)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(KeyPairMsg other) {
      if (other == KeyPairMsg.getDefaultInstance()) return this;
      if (!other.getKeyID().isEmpty()) {
        keyID_ = other.keyID_;
        onChanged();
      }
      if (!other.getKeyToken().isEmpty()) {
        keyToken_ = other.keyToken_;
        onChanged();
      }
      if (!other.getKeyType().isEmpty()) {
        keyType_ = other.keyType_;
        onChanged();
      }
      if (!other.getPublicKey().isEmpty()) {
        publicKey_ = other.publicKey_;
        onChanged();
      }
      if (!other.getSSHPublicKey().isEmpty()) {
        sSHPublicKey_ = other.sSHPublicKey_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      KeyPairMsg parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (KeyPairMsg) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private Object keyID_ = "";
    /**
     * <pre>
     * unique key id of the key-pair
     * </pre>
     *
     * <code>string KeyID = 1;</code>
     * @return The keyID.
     */
    public String getKeyID() {
      Object ref = keyID_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        keyID_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * unique key id of the key-pair
     * </pre>
     *
     * <code>string KeyID = 1;</code>
     * @return The bytes for keyID.
     */
    public com.google.protobuf.ByteString
        getKeyIDBytes() {
      Object ref = keyID_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        keyID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * unique key id of the key-pair
     * </pre>
     *
     * <code>string KeyID = 1;</code>
     * @param value The keyID to set.
     * @return This builder for chaining.
     */
    public Builder setKeyID(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      keyID_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * unique key id of the key-pair
     * </pre>
     *
     * <code>string KeyID = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearKeyID() {
      
      keyID_ = getDefaultInstance().getKeyID();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * unique key id of the key-pair
     * </pre>
     *
     * <code>string KeyID = 1;</code>
     * @param value The bytes for keyID to set.
     * @return This builder for chaining.
     */
    public Builder setKeyIDBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      keyID_ = value;
      onChanged();
      return this;
    }

    private Object keyToken_ = "";
    /**
     * <pre>
     * token to access this key-id 
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @return The keyToken.
     */
    public String getKeyToken() {
      Object ref = keyToken_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        keyToken_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * token to access this key-id 
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @return The bytes for keyToken.
     */
    public com.google.protobuf.ByteString
        getKeyTokenBytes() {
      Object ref = keyToken_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        keyToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * token to access this key-id 
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @param value The keyToken to set.
     * @return This builder for chaining.
     */
    public Builder setKeyToken(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      keyToken_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * token to access this key-id 
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearKeyToken() {
      
      keyToken_ = getDefaultInstance().getKeyToken();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * token to access this key-id 
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @param value The bytes for keyToken to set.
     * @return This builder for chaining.
     */
    public Builder setKeyTokenBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      keyToken_ = value;
      onChanged();
      return this;
    }

    private Object keyType_ = "";
    /**
     * <pre>
     * key type (rsa, ecdsa)
     * </pre>
     *
     * <code>string KeyType = 3;</code>
     * @return The keyType.
     */
    public String getKeyType() {
      Object ref = keyType_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        keyType_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * key type (rsa, ecdsa)
     * </pre>
     *
     * <code>string KeyType = 3;</code>
     * @return The bytes for keyType.
     */
    public com.google.protobuf.ByteString
        getKeyTypeBytes() {
      Object ref = keyType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        keyType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * key type (rsa, ecdsa)
     * </pre>
     *
     * <code>string KeyType = 3;</code>
     * @param value The keyType to set.
     * @return This builder for chaining.
     */
    public Builder setKeyType(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      keyType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * key type (rsa, ecdsa)
     * </pre>
     *
     * <code>string KeyType = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearKeyType() {
      
      keyType_ = getDefaultInstance().getKeyType();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * key type (rsa, ecdsa)
     * </pre>
     *
     * <code>string KeyType = 3;</code>
     * @param value The bytes for keyType to set.
     * @return This builder for chaining.
     */
    public Builder setKeyTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      keyType_ = value;
      onChanged();
      return this;
    }

    private Object publicKey_ = "";
    /**
     * <pre>
     * public key 
     * </pre>
     *
     * <code>string PublicKey = 4;</code>
     * @return The publicKey.
     */
    public String getPublicKey() {
      Object ref = publicKey_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        publicKey_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * public key 
     * </pre>
     *
     * <code>string PublicKey = 4;</code>
     * @return The bytes for publicKey.
     */
    public com.google.protobuf.ByteString
        getPublicKeyBytes() {
      Object ref = publicKey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        publicKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * public key 
     * </pre>
     *
     * <code>string PublicKey = 4;</code>
     * @param value The publicKey to set.
     * @return This builder for chaining.
     */
    public Builder setPublicKey(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      publicKey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * public key 
     * </pre>
     *
     * <code>string PublicKey = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPublicKey() {
      
      publicKey_ = getDefaultInstance().getPublicKey();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * public key 
     * </pre>
     *
     * <code>string PublicKey = 4;</code>
     * @param value The bytes for publicKey to set.
     * @return This builder for chaining.
     */
    public Builder setPublicKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      publicKey_ = value;
      onChanged();
      return this;
    }

    private Object sSHPublicKey_ = "";
    /**
     * <pre>
     * ssh public key
     * </pre>
     *
     * <code>string SSHPublicKey = 5;</code>
     * @return The sSHPublicKey.
     */
    public String getSSHPublicKey() {
      Object ref = sSHPublicKey_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        sSHPublicKey_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * ssh public key
     * </pre>
     *
     * <code>string SSHPublicKey = 5;</code>
     * @return The bytes for sSHPublicKey.
     */
    public com.google.protobuf.ByteString
        getSSHPublicKeyBytes() {
      Object ref = sSHPublicKey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        sSHPublicKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * ssh public key
     * </pre>
     *
     * <code>string SSHPublicKey = 5;</code>
     * @param value The sSHPublicKey to set.
     * @return This builder for chaining.
     */
    public Builder setSSHPublicKey(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sSHPublicKey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ssh public key
     * </pre>
     *
     * <code>string SSHPublicKey = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearSSHPublicKey() {
      
      sSHPublicKey_ = getDefaultInstance().getSSHPublicKey();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ssh public key
     * </pre>
     *
     * <code>string SSHPublicKey = 5;</code>
     * @param value The bytes for sSHPublicKey to set.
     * @return This builder for chaining.
     */
    public Builder setSSHPublicKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      sSHPublicKey_ = value;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:rpc.KeyPairMsg)
  }

  // @@protoc_insertion_point(class_scope:rpc.KeyPairMsg)
  private static final KeyPairMsg DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new KeyPairMsg();
  }

  public static KeyPairMsg getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<KeyPairMsg>
      PARSER = new com.google.protobuf.AbstractParser<KeyPairMsg>() {
    @Override
    public KeyPairMsg parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new KeyPairMsg(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<KeyPairMsg> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<KeyPairMsg> getParserForType() {
    return PARSER;
  }

  @Override
  public KeyPairMsg getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

