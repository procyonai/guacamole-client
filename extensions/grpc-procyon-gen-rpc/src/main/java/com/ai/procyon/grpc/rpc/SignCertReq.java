// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notary.proto

package com.ai.procyon.grpc.rpc;

/**
 * Protobuf type {@code rpc.SignCertReq}
 */
public final class SignCertReq extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:rpc.SignCertReq)
    SignCertReqOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SignCertReq.newBuilder() to construct.
  private SignCertReq(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SignCertReq() {
    subjectKeyID_ = "";
    keyToken_ = "";
    issuerCert_ = "";
    authorityKeyID_ = "";
    principal_ = "";
    requestor_ = "";
    requestorPublicKey_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new SignCertReq();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SignCertReq(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            String s = input.readStringRequireUtf8();

            subjectKeyID_ = s;
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();

            keyToken_ = s;
            break;
          }
          case 26: {
            String s = input.readStringRequireUtf8();

            issuerCert_ = s;
            break;
          }
          case 34: {
            String s = input.readStringRequireUtf8();

            authorityKeyID_ = s;
            break;
          }
          case 42: {
            String s = input.readStringRequireUtf8();

            principal_ = s;
            break;
          }
          case 50: {
            String s = input.readStringRequireUtf8();

            requestor_ = s;
            break;
          }
          case 58: {
            String s = input.readStringRequireUtf8();

            requestorPublicKey_ = s;
            break;
          }
          case 66: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              subject_ = com.google.protobuf.MapField.newMapField(
                  SubjectDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<String, String>
            subject__ = input.readMessage(
                SubjectDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            subject_.getMutableMap().put(
                subject__.getKey(), subject__.getValue());
            break;
          }
          case 72: {

            expiry_ = input.readInt32();
            break;
          }
          case 82: {
            com.ai.procyon.grpc.common.StringArray.Builder subBuilder = null;
            if (domainNames_ != null) {
              subBuilder = domainNames_.toBuilder();
            }
            domainNames_ = input.readMessage(com.ai.procyon.grpc.common.StringArray.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(domainNames_);
              domainNames_ = subBuilder.buildPartial();
            }

            break;
          }
          case 90: {
            com.ai.procyon.grpc.common.ObjectRef.Builder subBuilder = null;
            if (target_ != null) {
              subBuilder = target_.toBuilder();
            }
            target_ = input.readMessage(com.ai.procyon.grpc.common.ObjectRef.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(target_);
              target_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return RPCProto.internal_static_rpc_SignCertReq_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 8:
        return internalGetSubject();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return RPCProto.internal_static_rpc_SignCertReq_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            SignCertReq.class, Builder.class);
  }

  public static final int SUBJECTKEYID_FIELD_NUMBER = 1;
  private volatile Object subjectKeyID_;
  /**
   * <pre>
   * unique key id - for intermediate CA certs use Transit Key ID, for leaf Certs use some random value
   * </pre>
   *
   * <code>string SubjectKeyID = 1;</code>
   * @return The subjectKeyID.
   */
  @Override
  public String getSubjectKeyID() {
    Object ref = subjectKeyID_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      subjectKeyID_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * unique key id - for intermediate CA certs use Transit Key ID, for leaf Certs use some random value
   * </pre>
   *
   * <code>string SubjectKeyID = 1;</code>
   * @return The bytes for subjectKeyID.
   */
  @Override
  public com.google.protobuf.ByteString
      getSubjectKeyIDBytes() {
    Object ref = subjectKeyID_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      subjectKeyID_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int KEYTOKEN_FIELD_NUMBER = 2;
  private volatile Object keyToken_;
  /**
   * <pre>
   * token to access this key-id
   * </pre>
   *
   * <code>string KeyToken = 2;</code>
   * @return The keyToken.
   */
  @Override
  public String getKeyToken() {
    Object ref = keyToken_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      keyToken_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * token to access this key-id
   * </pre>
   *
   * <code>string KeyToken = 2;</code>
   * @return The bytes for keyToken.
   */
  @Override
  public com.google.protobuf.ByteString
      getKeyTokenBytes() {
    Object ref = keyToken_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      keyToken_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ISSUERCERT_FIELD_NUMBER = 3;
  private volatile Object issuerCert_;
  /**
   * <pre>
   * Issuer certificate - for Root CA don't include it
   * </pre>
   *
   * <code>string IssuerCert = 3;</code>
   * @return The issuerCert.
   */
  @Override
  public String getIssuerCert() {
    Object ref = issuerCert_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      issuerCert_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Issuer certificate - for Root CA don't include it
   * </pre>
   *
   * <code>string IssuerCert = 3;</code>
   * @return The bytes for issuerCert.
   */
  @Override
  public com.google.protobuf.ByteString
      getIssuerCertBytes() {
    Object ref = issuerCert_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      issuerCert_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int AUTHORITYKEYID_FIELD_NUMBER = 4;
  private volatile Object authorityKeyID_;
  /**
   * <pre>
   * Issuer KeyID - always needed
   * </pre>
   *
   * <code>string AuthorityKeyID = 4;</code>
   * @return The authorityKeyID.
   */
  @Override
  public String getAuthorityKeyID() {
    Object ref = authorityKeyID_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      authorityKeyID_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Issuer KeyID - always needed
   * </pre>
   *
   * <code>string AuthorityKeyID = 4;</code>
   * @return The bytes for authorityKeyID.
   */
  @Override
  public com.google.protobuf.ByteString
      getAuthorityKeyIDBytes() {
    Object ref = authorityKeyID_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      authorityKeyID_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PRINCIPAL_FIELD_NUMBER = 5;
  private volatile Object principal_;
  /**
   * <pre>
   * issued to principal name (hostname in cert)
   * </pre>
   *
   * <code>string Principal = 5;</code>
   * @return The principal.
   */
  @Override
  public String getPrincipal() {
    Object ref = principal_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      principal_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * issued to principal name (hostname in cert)
   * </pre>
   *
   * <code>string Principal = 5;</code>
   * @return The bytes for principal.
   */
  @Override
  public com.google.protobuf.ByteString
      getPrincipalBytes() {
    Object ref = principal_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      principal_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int REQUESTOR_FIELD_NUMBER = 6;
  private volatile Object requestor_;
  /**
   * <pre>
   * who requested this certificate
   * </pre>
   *
   * <code>string Requestor = 6;</code>
   * @return The requestor.
   */
  @Override
  public String getRequestor() {
    Object ref = requestor_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      requestor_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * who requested this certificate
   * </pre>
   *
   * <code>string Requestor = 6;</code>
   * @return The bytes for requestor.
   */
  @Override
  public com.google.protobuf.ByteString
      getRequestorBytes() {
    Object ref = requestor_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      requestor_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int REQUESTORPUBLICKEY_FIELD_NUMBER = 7;
  private volatile Object requestorPublicKey_;
  /**
   * <pre>
   * public key of requester
   * </pre>
   *
   * <code>string RequestorPublicKey = 7;</code>
   * @return The requestorPublicKey.
   */
  @Override
  public String getRequestorPublicKey() {
    Object ref = requestorPublicKey_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      requestorPublicKey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * public key of requester
   * </pre>
   *
   * <code>string RequestorPublicKey = 7;</code>
   * @return The bytes for requestorPublicKey.
   */
  @Override
  public com.google.protobuf.ByteString
      getRequestorPublicKeyBytes() {
    Object ref = requestorPublicKey_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      requestorPublicKey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SUBJECT_FIELD_NUMBER = 8;
  private static final class SubjectDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        String, String> defaultEntry =
            com.google.protobuf.MapEntry
            .<String, String>newDefaultInstance(
                RPCProto.internal_static_rpc_SignCertReq_SubjectEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      String, String> subject_;
  private com.google.protobuf.MapField<String, String>
  internalGetSubject() {
    if (subject_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          SubjectDefaultEntryHolder.defaultEntry);
    }
    return subject_;
  }

  public int getSubjectCount() {
    return internalGetSubject().getMap().size();
  }
  /**
   * <pre>
   * subject names
   * </pre>
   *
   * <code>map&lt;string, string&gt; Subject = 8;</code>
   */

  @Override
  public boolean containsSubject(
      String key) {
    if (key == null) { throw new NullPointerException(); }
    return internalGetSubject().getMap().containsKey(key);
  }
  /**
   * Use {@link #getSubjectMap()} instead.
   */
  @Override
  @Deprecated
  public java.util.Map<String, String> getSubject() {
    return getSubjectMap();
  }
  /**
   * <pre>
   * subject names
   * </pre>
   *
   * <code>map&lt;string, string&gt; Subject = 8;</code>
   */
  @Override

  public java.util.Map<String, String> getSubjectMap() {
    return internalGetSubject().getMap();
  }
  /**
   * <pre>
   * subject names
   * </pre>
   *
   * <code>map&lt;string, string&gt; Subject = 8;</code>
   */
  @Override

  public String getSubjectOrDefault(
      String key,
      String defaultValue) {
    if (key == null) { throw new NullPointerException(); }
    java.util.Map<String, String> map =
        internalGetSubject().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * subject names
   * </pre>
   *
   * <code>map&lt;string, string&gt; Subject = 8;</code>
   */
  @Override

  public String getSubjectOrThrow(
      String key) {
    if (key == null) { throw new NullPointerException(); }
    java.util.Map<String, String> map =
        internalGetSubject().getMap();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int EXPIRY_FIELD_NUMBER = 9;
  private int expiry_;
  /**
   * <pre>
   * Expirty in Years
   * </pre>
   *
   * <code>int32 Expiry = 9;</code>
   * @return The expiry.
   */
  @Override
  public int getExpiry() {
    return expiry_;
  }

  public static final int DOMAINNAMES_FIELD_NUMBER = 10;
  private com.ai.procyon.grpc.common.StringArray domainNames_;
  /**
   * <pre>
   * DNSNames
   * </pre>
   *
   * <code>.model.StringArray DomainNames = 10;</code>
   * @return Whether the domainNames field is set.
   */
  @Override
  public boolean hasDomainNames() {
    return domainNames_ != null;
  }
  /**
   * <pre>
   * DNSNames
   * </pre>
   *
   * <code>.model.StringArray DomainNames = 10;</code>
   * @return The domainNames.
   */
  @Override
  public com.ai.procyon.grpc.common.StringArray getDomainNames() {
    return domainNames_ == null ? com.ai.procyon.grpc.common.StringArray.getDefaultInstance() : domainNames_;
  }
  /**
   * <pre>
   * DNSNames
   * </pre>
   *
   * <code>.model.StringArray DomainNames = 10;</code>
   */
  @Override
  public com.ai.procyon.grpc.common.StringArrayOrBuilder getDomainNamesOrBuilder() {
    return getDomainNames();
  }

  public static final int TARGET_FIELD_NUMBER = 11;
  private com.ai.procyon.grpc.common.ObjectRef target_;
  /**
   * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
   * @return Whether the target field is set.
   */
  @Override
  public boolean hasTarget() {
    return target_ != null;
  }
  /**
   * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
   * @return The target.
   */
  @Override
  public com.ai.procyon.grpc.common.ObjectRef getTarget() {
    return target_ == null ? com.ai.procyon.grpc.common.ObjectRef.getDefaultInstance() : target_;
  }
  /**
   * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
   */
  @Override
  public com.ai.procyon.grpc.common.ObjectRefOrBuilder getTargetOrBuilder() {
    return getTarget();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getSubjectKeyIDBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, subjectKeyID_);
    }
    if (!getKeyTokenBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, keyToken_);
    }
    if (!getIssuerCertBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, issuerCert_);
    }
    if (!getAuthorityKeyIDBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, authorityKeyID_);
    }
    if (!getPrincipalBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, principal_);
    }
    if (!getRequestorBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, requestor_);
    }
    if (!getRequestorPublicKeyBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, requestorPublicKey_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetSubject(),
        SubjectDefaultEntryHolder.defaultEntry,
        8);
    if (expiry_ != 0) {
      output.writeInt32(9, expiry_);
    }
    if (domainNames_ != null) {
      output.writeMessage(10, getDomainNames());
    }
    if (target_ != null) {
      output.writeMessage(11, getTarget());
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getSubjectKeyIDBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, subjectKeyID_);
    }
    if (!getKeyTokenBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, keyToken_);
    }
    if (!getIssuerCertBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, issuerCert_);
    }
    if (!getAuthorityKeyIDBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, authorityKeyID_);
    }
    if (!getPrincipalBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, principal_);
    }
    if (!getRequestorBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, requestor_);
    }
    if (!getRequestorPublicKeyBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, requestorPublicKey_);
    }
    for (java.util.Map.Entry<String, String> entry
         : internalGetSubject().getMap().entrySet()) {
      com.google.protobuf.MapEntry<String, String>
      subject__ = SubjectDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, subject__);
    }
    if (expiry_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, expiry_);
    }
    if (domainNames_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getDomainNames());
    }
    if (target_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getTarget());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof SignCertReq)) {
      return super.equals(obj);
    }
    SignCertReq other = (SignCertReq) obj;

    if (!getSubjectKeyID()
        .equals(other.getSubjectKeyID())) return false;
    if (!getKeyToken()
        .equals(other.getKeyToken())) return false;
    if (!getIssuerCert()
        .equals(other.getIssuerCert())) return false;
    if (!getAuthorityKeyID()
        .equals(other.getAuthorityKeyID())) return false;
    if (!getPrincipal()
        .equals(other.getPrincipal())) return false;
    if (!getRequestor()
        .equals(other.getRequestor())) return false;
    if (!getRequestorPublicKey()
        .equals(other.getRequestorPublicKey())) return false;
    if (!internalGetSubject().equals(
        other.internalGetSubject())) return false;
    if (getExpiry()
        != other.getExpiry()) return false;
    if (hasDomainNames() != other.hasDomainNames()) return false;
    if (hasDomainNames()) {
      if (!getDomainNames()
          .equals(other.getDomainNames())) return false;
    }
    if (hasTarget() != other.hasTarget()) return false;
    if (hasTarget()) {
      if (!getTarget()
          .equals(other.getTarget())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SUBJECTKEYID_FIELD_NUMBER;
    hash = (53 * hash) + getSubjectKeyID().hashCode();
    hash = (37 * hash) + KEYTOKEN_FIELD_NUMBER;
    hash = (53 * hash) + getKeyToken().hashCode();
    hash = (37 * hash) + ISSUERCERT_FIELD_NUMBER;
    hash = (53 * hash) + getIssuerCert().hashCode();
    hash = (37 * hash) + AUTHORITYKEYID_FIELD_NUMBER;
    hash = (53 * hash) + getAuthorityKeyID().hashCode();
    hash = (37 * hash) + PRINCIPAL_FIELD_NUMBER;
    hash = (53 * hash) + getPrincipal().hashCode();
    hash = (37 * hash) + REQUESTOR_FIELD_NUMBER;
    hash = (53 * hash) + getRequestor().hashCode();
    hash = (37 * hash) + REQUESTORPUBLICKEY_FIELD_NUMBER;
    hash = (53 * hash) + getRequestorPublicKey().hashCode();
    if (!internalGetSubject().getMap().isEmpty()) {
      hash = (37 * hash) + SUBJECT_FIELD_NUMBER;
      hash = (53 * hash) + internalGetSubject().hashCode();
    }
    hash = (37 * hash) + EXPIRY_FIELD_NUMBER;
    hash = (53 * hash) + getExpiry();
    if (hasDomainNames()) {
      hash = (37 * hash) + DOMAINNAMES_FIELD_NUMBER;
      hash = (53 * hash) + getDomainNames().hashCode();
    }
    if (hasTarget()) {
      hash = (37 * hash) + TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getTarget().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static SignCertReq parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SignCertReq parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SignCertReq parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SignCertReq parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SignCertReq parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static SignCertReq parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static SignCertReq parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static SignCertReq parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static SignCertReq parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static SignCertReq parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static SignCertReq parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static SignCertReq parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(SignCertReq prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code rpc.SignCertReq}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:rpc.SignCertReq)
      SignCertReqOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RPCProto.internal_static_rpc_SignCertReq_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 8:
          return internalGetSubject();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 8:
          return internalGetMutableSubject();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RPCProto.internal_static_rpc_SignCertReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SignCertReq.class, Builder.class);
    }

    // Construct using com.ai.procyon.grpc.rpc.SignCertReq.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      subjectKeyID_ = "";

      keyToken_ = "";

      issuerCert_ = "";

      authorityKeyID_ = "";

      principal_ = "";

      requestor_ = "";

      requestorPublicKey_ = "";

      internalGetMutableSubject().clear();
      expiry_ = 0;

      if (domainNamesBuilder_ == null) {
        domainNames_ = null;
      } else {
        domainNames_ = null;
        domainNamesBuilder_ = null;
      }
      if (targetBuilder_ == null) {
        target_ = null;
      } else {
        target_ = null;
        targetBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return RPCProto.internal_static_rpc_SignCertReq_descriptor;
    }

    @Override
    public SignCertReq getDefaultInstanceForType() {
      return SignCertReq.getDefaultInstance();
    }

    @Override
    public SignCertReq build() {
      SignCertReq result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public SignCertReq buildPartial() {
      SignCertReq result = new SignCertReq(this);
      int from_bitField0_ = bitField0_;
      result.subjectKeyID_ = subjectKeyID_;
      result.keyToken_ = keyToken_;
      result.issuerCert_ = issuerCert_;
      result.authorityKeyID_ = authorityKeyID_;
      result.principal_ = principal_;
      result.requestor_ = requestor_;
      result.requestorPublicKey_ = requestorPublicKey_;
      result.subject_ = internalGetSubject();
      result.subject_.makeImmutable();
      result.expiry_ = expiry_;
      if (domainNamesBuilder_ == null) {
        result.domainNames_ = domainNames_;
      } else {
        result.domainNames_ = domainNamesBuilder_.build();
      }
      if (targetBuilder_ == null) {
        result.target_ = target_;
      } else {
        result.target_ = targetBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof SignCertReq) {
        return mergeFrom((SignCertReq)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(SignCertReq other) {
      if (other == SignCertReq.getDefaultInstance()) return this;
      if (!other.getSubjectKeyID().isEmpty()) {
        subjectKeyID_ = other.subjectKeyID_;
        onChanged();
      }
      if (!other.getKeyToken().isEmpty()) {
        keyToken_ = other.keyToken_;
        onChanged();
      }
      if (!other.getIssuerCert().isEmpty()) {
        issuerCert_ = other.issuerCert_;
        onChanged();
      }
      if (!other.getAuthorityKeyID().isEmpty()) {
        authorityKeyID_ = other.authorityKeyID_;
        onChanged();
      }
      if (!other.getPrincipal().isEmpty()) {
        principal_ = other.principal_;
        onChanged();
      }
      if (!other.getRequestor().isEmpty()) {
        requestor_ = other.requestor_;
        onChanged();
      }
      if (!other.getRequestorPublicKey().isEmpty()) {
        requestorPublicKey_ = other.requestorPublicKey_;
        onChanged();
      }
      internalGetMutableSubject().mergeFrom(
          other.internalGetSubject());
      if (other.getExpiry() != 0) {
        setExpiry(other.getExpiry());
      }
      if (other.hasDomainNames()) {
        mergeDomainNames(other.getDomainNames());
      }
      if (other.hasTarget()) {
        mergeTarget(other.getTarget());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      SignCertReq parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (SignCertReq) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private Object subjectKeyID_ = "";
    /**
     * <pre>
     * unique key id - for intermediate CA certs use Transit Key ID, for leaf Certs use some random value
     * </pre>
     *
     * <code>string SubjectKeyID = 1;</code>
     * @return The subjectKeyID.
     */
    public String getSubjectKeyID() {
      Object ref = subjectKeyID_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        subjectKeyID_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * unique key id - for intermediate CA certs use Transit Key ID, for leaf Certs use some random value
     * </pre>
     *
     * <code>string SubjectKeyID = 1;</code>
     * @return The bytes for subjectKeyID.
     */
    public com.google.protobuf.ByteString
        getSubjectKeyIDBytes() {
      Object ref = subjectKeyID_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        subjectKeyID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * unique key id - for intermediate CA certs use Transit Key ID, for leaf Certs use some random value
     * </pre>
     *
     * <code>string SubjectKeyID = 1;</code>
     * @param value The subjectKeyID to set.
     * @return This builder for chaining.
     */
    public Builder setSubjectKeyID(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      subjectKeyID_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * unique key id - for intermediate CA certs use Transit Key ID, for leaf Certs use some random value
     * </pre>
     *
     * <code>string SubjectKeyID = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSubjectKeyID() {
      
      subjectKeyID_ = getDefaultInstance().getSubjectKeyID();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * unique key id - for intermediate CA certs use Transit Key ID, for leaf Certs use some random value
     * </pre>
     *
     * <code>string SubjectKeyID = 1;</code>
     * @param value The bytes for subjectKeyID to set.
     * @return This builder for chaining.
     */
    public Builder setSubjectKeyIDBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      subjectKeyID_ = value;
      onChanged();
      return this;
    }

    private Object keyToken_ = "";
    /**
     * <pre>
     * token to access this key-id
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @return The keyToken.
     */
    public String getKeyToken() {
      Object ref = keyToken_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        keyToken_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * token to access this key-id
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @return The bytes for keyToken.
     */
    public com.google.protobuf.ByteString
        getKeyTokenBytes() {
      Object ref = keyToken_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        keyToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * token to access this key-id
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @param value The keyToken to set.
     * @return This builder for chaining.
     */
    public Builder setKeyToken(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      keyToken_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * token to access this key-id
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearKeyToken() {
      
      keyToken_ = getDefaultInstance().getKeyToken();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * token to access this key-id
     * </pre>
     *
     * <code>string KeyToken = 2;</code>
     * @param value The bytes for keyToken to set.
     * @return This builder for chaining.
     */
    public Builder setKeyTokenBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      keyToken_ = value;
      onChanged();
      return this;
    }

    private Object issuerCert_ = "";
    /**
     * <pre>
     * Issuer certificate - for Root CA don't include it
     * </pre>
     *
     * <code>string IssuerCert = 3;</code>
     * @return The issuerCert.
     */
    public String getIssuerCert() {
      Object ref = issuerCert_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        issuerCert_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Issuer certificate - for Root CA don't include it
     * </pre>
     *
     * <code>string IssuerCert = 3;</code>
     * @return The bytes for issuerCert.
     */
    public com.google.protobuf.ByteString
        getIssuerCertBytes() {
      Object ref = issuerCert_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        issuerCert_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Issuer certificate - for Root CA don't include it
     * </pre>
     *
     * <code>string IssuerCert = 3;</code>
     * @param value The issuerCert to set.
     * @return This builder for chaining.
     */
    public Builder setIssuerCert(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      issuerCert_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Issuer certificate - for Root CA don't include it
     * </pre>
     *
     * <code>string IssuerCert = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearIssuerCert() {
      
      issuerCert_ = getDefaultInstance().getIssuerCert();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Issuer certificate - for Root CA don't include it
     * </pre>
     *
     * <code>string IssuerCert = 3;</code>
     * @param value The bytes for issuerCert to set.
     * @return This builder for chaining.
     */
    public Builder setIssuerCertBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      issuerCert_ = value;
      onChanged();
      return this;
    }

    private Object authorityKeyID_ = "";
    /**
     * <pre>
     * Issuer KeyID - always needed
     * </pre>
     *
     * <code>string AuthorityKeyID = 4;</code>
     * @return The authorityKeyID.
     */
    public String getAuthorityKeyID() {
      Object ref = authorityKeyID_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        authorityKeyID_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Issuer KeyID - always needed
     * </pre>
     *
     * <code>string AuthorityKeyID = 4;</code>
     * @return The bytes for authorityKeyID.
     */
    public com.google.protobuf.ByteString
        getAuthorityKeyIDBytes() {
      Object ref = authorityKeyID_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        authorityKeyID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Issuer KeyID - always needed
     * </pre>
     *
     * <code>string AuthorityKeyID = 4;</code>
     * @param value The authorityKeyID to set.
     * @return This builder for chaining.
     */
    public Builder setAuthorityKeyID(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      authorityKeyID_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Issuer KeyID - always needed
     * </pre>
     *
     * <code>string AuthorityKeyID = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAuthorityKeyID() {
      
      authorityKeyID_ = getDefaultInstance().getAuthorityKeyID();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Issuer KeyID - always needed
     * </pre>
     *
     * <code>string AuthorityKeyID = 4;</code>
     * @param value The bytes for authorityKeyID to set.
     * @return This builder for chaining.
     */
    public Builder setAuthorityKeyIDBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      authorityKeyID_ = value;
      onChanged();
      return this;
    }

    private Object principal_ = "";
    /**
     * <pre>
     * issued to principal name (hostname in cert)
     * </pre>
     *
     * <code>string Principal = 5;</code>
     * @return The principal.
     */
    public String getPrincipal() {
      Object ref = principal_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        principal_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * issued to principal name (hostname in cert)
     * </pre>
     *
     * <code>string Principal = 5;</code>
     * @return The bytes for principal.
     */
    public com.google.protobuf.ByteString
        getPrincipalBytes() {
      Object ref = principal_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        principal_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * issued to principal name (hostname in cert)
     * </pre>
     *
     * <code>string Principal = 5;</code>
     * @param value The principal to set.
     * @return This builder for chaining.
     */
    public Builder setPrincipal(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      principal_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * issued to principal name (hostname in cert)
     * </pre>
     *
     * <code>string Principal = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearPrincipal() {
      
      principal_ = getDefaultInstance().getPrincipal();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * issued to principal name (hostname in cert)
     * </pre>
     *
     * <code>string Principal = 5;</code>
     * @param value The bytes for principal to set.
     * @return This builder for chaining.
     */
    public Builder setPrincipalBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      principal_ = value;
      onChanged();
      return this;
    }

    private Object requestor_ = "";
    /**
     * <pre>
     * who requested this certificate
     * </pre>
     *
     * <code>string Requestor = 6;</code>
     * @return The requestor.
     */
    public String getRequestor() {
      Object ref = requestor_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        requestor_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * who requested this certificate
     * </pre>
     *
     * <code>string Requestor = 6;</code>
     * @return The bytes for requestor.
     */
    public com.google.protobuf.ByteString
        getRequestorBytes() {
      Object ref = requestor_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        requestor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * who requested this certificate
     * </pre>
     *
     * <code>string Requestor = 6;</code>
     * @param value The requestor to set.
     * @return This builder for chaining.
     */
    public Builder setRequestor(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      requestor_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * who requested this certificate
     * </pre>
     *
     * <code>string Requestor = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearRequestor() {
      
      requestor_ = getDefaultInstance().getRequestor();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * who requested this certificate
     * </pre>
     *
     * <code>string Requestor = 6;</code>
     * @param value The bytes for requestor to set.
     * @return This builder for chaining.
     */
    public Builder setRequestorBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      requestor_ = value;
      onChanged();
      return this;
    }

    private Object requestorPublicKey_ = "";
    /**
     * <pre>
     * public key of requester
     * </pre>
     *
     * <code>string RequestorPublicKey = 7;</code>
     * @return The requestorPublicKey.
     */
    public String getRequestorPublicKey() {
      Object ref = requestorPublicKey_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        requestorPublicKey_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * public key of requester
     * </pre>
     *
     * <code>string RequestorPublicKey = 7;</code>
     * @return The bytes for requestorPublicKey.
     */
    public com.google.protobuf.ByteString
        getRequestorPublicKeyBytes() {
      Object ref = requestorPublicKey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        requestorPublicKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * public key of requester
     * </pre>
     *
     * <code>string RequestorPublicKey = 7;</code>
     * @param value The requestorPublicKey to set.
     * @return This builder for chaining.
     */
    public Builder setRequestorPublicKey(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      requestorPublicKey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * public key of requester
     * </pre>
     *
     * <code>string RequestorPublicKey = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearRequestorPublicKey() {
      
      requestorPublicKey_ = getDefaultInstance().getRequestorPublicKey();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * public key of requester
     * </pre>
     *
     * <code>string RequestorPublicKey = 7;</code>
     * @param value The bytes for requestorPublicKey to set.
     * @return This builder for chaining.
     */
    public Builder setRequestorPublicKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      requestorPublicKey_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        String, String> subject_;
    private com.google.protobuf.MapField<String, String>
    internalGetSubject() {
      if (subject_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            SubjectDefaultEntryHolder.defaultEntry);
      }
      return subject_;
    }
    private com.google.protobuf.MapField<String, String>
    internalGetMutableSubject() {
      onChanged();;
      if (subject_ == null) {
        subject_ = com.google.protobuf.MapField.newMapField(
            SubjectDefaultEntryHolder.defaultEntry);
      }
      if (!subject_.isMutable()) {
        subject_ = subject_.copy();
      }
      return subject_;
    }

    public int getSubjectCount() {
      return internalGetSubject().getMap().size();
    }
    /**
     * <pre>
     * subject names
     * </pre>
     *
     * <code>map&lt;string, string&gt; Subject = 8;</code>
     */

    @Override
    public boolean containsSubject(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetSubject().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSubjectMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, String> getSubject() {
      return getSubjectMap();
    }
    /**
     * <pre>
     * subject names
     * </pre>
     *
     * <code>map&lt;string, string&gt; Subject = 8;</code>
     */
    @Override

    public java.util.Map<String, String> getSubjectMap() {
      return internalGetSubject().getMap();
    }
    /**
     * <pre>
     * subject names
     * </pre>
     *
     * <code>map&lt;string, string&gt; Subject = 8;</code>
     */
    @Override

    public String getSubjectOrDefault(
        String key,
        String defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, String> map =
          internalGetSubject().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * subject names
     * </pre>
     *
     * <code>map&lt;string, string&gt; Subject = 8;</code>
     */
    @Override

    public String getSubjectOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, String> map =
          internalGetSubject().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearSubject() {
      internalGetMutableSubject().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * subject names
     * </pre>
     *
     * <code>map&lt;string, string&gt; Subject = 8;</code>
     */

    public Builder removeSubject(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      internalGetMutableSubject().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @Deprecated
    public java.util.Map<String, String>
    getMutableSubject() {
      return internalGetMutableSubject().getMutableMap();
    }
    /**
     * <pre>
     * subject names
     * </pre>
     *
     * <code>map&lt;string, string&gt; Subject = 8;</code>
     */
    public Builder putSubject(
        String key,
        String value) {
      if (key == null) { throw new NullPointerException(); }
      if (value == null) { throw new NullPointerException(); }
      internalGetMutableSubject().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * subject names
     * </pre>
     *
     * <code>map&lt;string, string&gt; Subject = 8;</code>
     */

    public Builder putAllSubject(
        java.util.Map<String, String> values) {
      internalGetMutableSubject().getMutableMap()
          .putAll(values);
      return this;
    }

    private int expiry_ ;
    /**
     * <pre>
     * Expirty in Years
     * </pre>
     *
     * <code>int32 Expiry = 9;</code>
     * @return The expiry.
     */
    @Override
    public int getExpiry() {
      return expiry_;
    }
    /**
     * <pre>
     * Expirty in Years
     * </pre>
     *
     * <code>int32 Expiry = 9;</code>
     * @param value The expiry to set.
     * @return This builder for chaining.
     */
    public Builder setExpiry(int value) {
      
      expiry_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Expirty in Years
     * </pre>
     *
     * <code>int32 Expiry = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearExpiry() {
      
      expiry_ = 0;
      onChanged();
      return this;
    }

    private com.ai.procyon.grpc.common.StringArray domainNames_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ai.procyon.grpc.common.StringArray, com.ai.procyon.grpc.common.StringArray.Builder, com.ai.procyon.grpc.common.StringArrayOrBuilder> domainNamesBuilder_;
    /**
     * <pre>
     * DNSNames
     * </pre>
     *
     * <code>.model.StringArray DomainNames = 10;</code>
     * @return Whether the domainNames field is set.
     */
    public boolean hasDomainNames() {
      return domainNamesBuilder_ != null || domainNames_ != null;
    }
    /**
     * <pre>
     * DNSNames
     * </pre>
     *
     * <code>.model.StringArray DomainNames = 10;</code>
     * @return The domainNames.
     */
    public com.ai.procyon.grpc.common.StringArray getDomainNames() {
      if (domainNamesBuilder_ == null) {
        return domainNames_ == null ? com.ai.procyon.grpc.common.StringArray.getDefaultInstance() : domainNames_;
      } else {
        return domainNamesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * DNSNames
     * </pre>
     *
     * <code>.model.StringArray DomainNames = 10;</code>
     */
    public Builder setDomainNames(com.ai.procyon.grpc.common.StringArray value) {
      if (domainNamesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        domainNames_ = value;
        onChanged();
      } else {
        domainNamesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * DNSNames
     * </pre>
     *
     * <code>.model.StringArray DomainNames = 10;</code>
     */
    public Builder setDomainNames(
        com.ai.procyon.grpc.common.StringArray.Builder builderForValue) {
      if (domainNamesBuilder_ == null) {
        domainNames_ = builderForValue.build();
        onChanged();
      } else {
        domainNamesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * DNSNames
     * </pre>
     *
     * <code>.model.StringArray DomainNames = 10;</code>
     */
    public Builder mergeDomainNames(com.ai.procyon.grpc.common.StringArray value) {
      if (domainNamesBuilder_ == null) {
        if (domainNames_ != null) {
          domainNames_ =
            com.ai.procyon.grpc.common.StringArray.newBuilder(domainNames_).mergeFrom(value).buildPartial();
        } else {
          domainNames_ = value;
        }
        onChanged();
      } else {
        domainNamesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * DNSNames
     * </pre>
     *
     * <code>.model.StringArray DomainNames = 10;</code>
     */
    public Builder clearDomainNames() {
      if (domainNamesBuilder_ == null) {
        domainNames_ = null;
        onChanged();
      } else {
        domainNames_ = null;
        domainNamesBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * DNSNames
     * </pre>
     *
     * <code>.model.StringArray DomainNames = 10;</code>
     */
    public com.ai.procyon.grpc.common.StringArray.Builder getDomainNamesBuilder() {
      
      onChanged();
      return getDomainNamesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * DNSNames
     * </pre>
     *
     * <code>.model.StringArray DomainNames = 10;</code>
     */
    public com.ai.procyon.grpc.common.StringArrayOrBuilder getDomainNamesOrBuilder() {
      if (domainNamesBuilder_ != null) {
        return domainNamesBuilder_.getMessageOrBuilder();
      } else {
        return domainNames_ == null ?
            com.ai.procyon.grpc.common.StringArray.getDefaultInstance() : domainNames_;
      }
    }
    /**
     * <pre>
     * DNSNames
     * </pre>
     *
     * <code>.model.StringArray DomainNames = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ai.procyon.grpc.common.StringArray, com.ai.procyon.grpc.common.StringArray.Builder, com.ai.procyon.grpc.common.StringArrayOrBuilder> 
        getDomainNamesFieldBuilder() {
      if (domainNamesBuilder_ == null) {
        domainNamesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.ai.procyon.grpc.common.StringArray, com.ai.procyon.grpc.common.StringArray.Builder, com.ai.procyon.grpc.common.StringArrayOrBuilder>(
                getDomainNames(),
                getParentForChildren(),
                isClean());
        domainNames_ = null;
      }
      return domainNamesBuilder_;
    }

    private com.ai.procyon.grpc.common.ObjectRef target_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ai.procyon.grpc.common.ObjectRef, com.ai.procyon.grpc.common.ObjectRef.Builder, com.ai.procyon.grpc.common.ObjectRefOrBuilder> targetBuilder_;
    /**
     * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
     * @return Whether the target field is set.
     */
    public boolean hasTarget() {
      return targetBuilder_ != null || target_ != null;
    }
    /**
     * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
     * @return The target.
     */
    public com.ai.procyon.grpc.common.ObjectRef getTarget() {
      if (targetBuilder_ == null) {
        return target_ == null ? com.ai.procyon.grpc.common.ObjectRef.getDefaultInstance() : target_;
      } else {
        return targetBuilder_.getMessage();
      }
    }
    /**
     * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
     */
    public Builder setTarget(com.ai.procyon.grpc.common.ObjectRef value) {
      if (targetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        targetBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
     */
    public Builder setTarget(
        com.ai.procyon.grpc.common.ObjectRef.Builder builderForValue) {
      if (targetBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        targetBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
     */
    public Builder mergeTarget(com.ai.procyon.grpc.common.ObjectRef value) {
      if (targetBuilder_ == null) {
        if (target_ != null) {
          target_ =
            com.ai.procyon.grpc.common.ObjectRef.newBuilder(target_).mergeFrom(value).buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        targetBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
     */
    public Builder clearTarget() {
      if (targetBuilder_ == null) {
        target_ = null;
        onChanged();
      } else {
        target_ = null;
        targetBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
     */
    public com.ai.procyon.grpc.common.ObjectRef.Builder getTargetBuilder() {
      
      onChanged();
      return getTargetFieldBuilder().getBuilder();
    }
    /**
     * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
     */
    public com.ai.procyon.grpc.common.ObjectRefOrBuilder getTargetOrBuilder() {
      if (targetBuilder_ != null) {
        return targetBuilder_.getMessageOrBuilder();
      } else {
        return target_ == null ?
            com.ai.procyon.grpc.common.ObjectRef.getDefaultInstance() : target_;
      }
    }
    /**
     * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.ai.procyon.grpc.common.ObjectRef, com.ai.procyon.grpc.common.ObjectRef.Builder, com.ai.procyon.grpc.common.ObjectRefOrBuilder> 
        getTargetFieldBuilder() {
      if (targetBuilder_ == null) {
        targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.ai.procyon.grpc.common.ObjectRef, com.ai.procyon.grpc.common.ObjectRef.Builder, com.ai.procyon.grpc.common.ObjectRefOrBuilder>(
                getTarget(),
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      return targetBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:rpc.SignCertReq)
  }

  // @@protoc_insertion_point(class_scope:rpc.SignCertReq)
  private static final SignCertReq DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SignCertReq();
  }

  public static SignCertReq getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SignCertReq>
      PARSER = new com.google.protobuf.AbstractParser<SignCertReq>() {
    @Override
    public SignCertReq parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SignCertReq(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SignCertReq> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<SignCertReq> getParserForType() {
    return PARSER;
  }

  @Override
  public SignCertReq getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

