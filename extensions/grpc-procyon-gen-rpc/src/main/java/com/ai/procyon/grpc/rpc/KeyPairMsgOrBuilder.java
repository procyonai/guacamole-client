// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notary.proto

package com.ai.procyon.grpc.rpc;

public interface KeyPairMsgOrBuilder extends
    // @@protoc_insertion_point(interface_extends:rpc.KeyPairMsg)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * unique key id of the key-pair
   * </pre>
   *
   * <code>string KeyID = 1;</code>
   * @return The keyID.
   */
  String getKeyID();
  /**
   * <pre>
   * unique key id of the key-pair
   * </pre>
   *
   * <code>string KeyID = 1;</code>
   * @return The bytes for keyID.
   */
  com.google.protobuf.ByteString
      getKeyIDBytes();

  /**
   * <pre>
   * token to access this key-id 
   * </pre>
   *
   * <code>string KeyToken = 2;</code>
   * @return The keyToken.
   */
  String getKeyToken();
  /**
   * <pre>
   * token to access this key-id 
   * </pre>
   *
   * <code>string KeyToken = 2;</code>
   * @return The bytes for keyToken.
   */
  com.google.protobuf.ByteString
      getKeyTokenBytes();

  /**
   * <pre>
   * key type (rsa, ecdsa)
   * </pre>
   *
   * <code>string KeyType = 3;</code>
   * @return The keyType.
   */
  String getKeyType();
  /**
   * <pre>
   * key type (rsa, ecdsa)
   * </pre>
   *
   * <code>string KeyType = 3;</code>
   * @return The bytes for keyType.
   */
  com.google.protobuf.ByteString
      getKeyTypeBytes();

  /**
   * <pre>
   * public key 
   * </pre>
   *
   * <code>string PublicKey = 4;</code>
   * @return The publicKey.
   */
  String getPublicKey();
  /**
   * <pre>
   * public key 
   * </pre>
   *
   * <code>string PublicKey = 4;</code>
   * @return The bytes for publicKey.
   */
  com.google.protobuf.ByteString
      getPublicKeyBytes();

  /**
   * <pre>
   * ssh public key
   * </pre>
   *
   * <code>string SSHPublicKey = 5;</code>
   * @return The sSHPublicKey.
   */
  String getSSHPublicKey();
  /**
   * <pre>
   * ssh public key
   * </pre>
   *
   * <code>string SSHPublicKey = 5;</code>
   * @return The bytes for sSHPublicKey.
   */
  com.google.protobuf.ByteString
      getSSHPublicKeyBytes();
}
