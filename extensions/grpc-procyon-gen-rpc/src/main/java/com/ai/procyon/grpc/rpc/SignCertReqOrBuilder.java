// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notary.proto

package com.ai.procyon.grpc.rpc;

public interface SignCertReqOrBuilder extends
    // @@protoc_insertion_point(interface_extends:rpc.SignCertReq)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * unique key id - for intermediate CA certs use Transit Key ID, for leaf Certs use some random value
   * </pre>
   *
   * <code>string SubjectKeyID = 1;</code>
   * @return The subjectKeyID.
   */
  String getSubjectKeyID();
  /**
   * <pre>
   * unique key id - for intermediate CA certs use Transit Key ID, for leaf Certs use some random value
   * </pre>
   *
   * <code>string SubjectKeyID = 1;</code>
   * @return The bytes for subjectKeyID.
   */
  com.google.protobuf.ByteString
      getSubjectKeyIDBytes();

  /**
   * <pre>
   * token to access this key-id
   * </pre>
   *
   * <code>string KeyToken = 2;</code>
   * @return The keyToken.
   */
  String getKeyToken();
  /**
   * <pre>
   * token to access this key-id
   * </pre>
   *
   * <code>string KeyToken = 2;</code>
   * @return The bytes for keyToken.
   */
  com.google.protobuf.ByteString
      getKeyTokenBytes();

  /**
   * <pre>
   * Issuer certificate - for Root CA don't include it
   * </pre>
   *
   * <code>string IssuerCert = 3;</code>
   * @return The issuerCert.
   */
  String getIssuerCert();
  /**
   * <pre>
   * Issuer certificate - for Root CA don't include it
   * </pre>
   *
   * <code>string IssuerCert = 3;</code>
   * @return The bytes for issuerCert.
   */
  com.google.protobuf.ByteString
      getIssuerCertBytes();

  /**
   * <pre>
   * Issuer KeyID - always needed
   * </pre>
   *
   * <code>string AuthorityKeyID = 4;</code>
   * @return The authorityKeyID.
   */
  String getAuthorityKeyID();
  /**
   * <pre>
   * Issuer KeyID - always needed
   * </pre>
   *
   * <code>string AuthorityKeyID = 4;</code>
   * @return The bytes for authorityKeyID.
   */
  com.google.protobuf.ByteString
      getAuthorityKeyIDBytes();

  /**
   * <pre>
   * issued to principal name (hostname in cert)
   * </pre>
   *
   * <code>string Principal = 5;</code>
   * @return The principal.
   */
  String getPrincipal();
  /**
   * <pre>
   * issued to principal name (hostname in cert)
   * </pre>
   *
   * <code>string Principal = 5;</code>
   * @return The bytes for principal.
   */
  com.google.protobuf.ByteString
      getPrincipalBytes();

  /**
   * <pre>
   * who requested this certificate
   * </pre>
   *
   * <code>string Requestor = 6;</code>
   * @return The requestor.
   */
  String getRequestor();
  /**
   * <pre>
   * who requested this certificate
   * </pre>
   *
   * <code>string Requestor = 6;</code>
   * @return The bytes for requestor.
   */
  com.google.protobuf.ByteString
      getRequestorBytes();

  /**
   * <pre>
   * public key of requester
   * </pre>
   *
   * <code>string RequestorPublicKey = 7;</code>
   * @return The requestorPublicKey.
   */
  String getRequestorPublicKey();
  /**
   * <pre>
   * public key of requester
   * </pre>
   *
   * <code>string RequestorPublicKey = 7;</code>
   * @return The bytes for requestorPublicKey.
   */
  com.google.protobuf.ByteString
      getRequestorPublicKeyBytes();

  /**
   * <pre>
   * subject names
   * </pre>
   *
   * <code>map&lt;string, string&gt; Subject = 8;</code>
   */
  int getSubjectCount();
  /**
   * <pre>
   * subject names
   * </pre>
   *
   * <code>map&lt;string, string&gt; Subject = 8;</code>
   */
  boolean containsSubject(
      String key);
  /**
   * Use {@link #getSubjectMap()} instead.
   */
  @Deprecated
  java.util.Map<String, String>
  getSubject();
  /**
   * <pre>
   * subject names
   * </pre>
   *
   * <code>map&lt;string, string&gt; Subject = 8;</code>
   */
  java.util.Map<String, String>
  getSubjectMap();
  /**
   * <pre>
   * subject names
   * </pre>
   *
   * <code>map&lt;string, string&gt; Subject = 8;</code>
   */

  String getSubjectOrDefault(
      String key,
      String defaultValue);
  /**
   * <pre>
   * subject names
   * </pre>
   *
   * <code>map&lt;string, string&gt; Subject = 8;</code>
   */

  String getSubjectOrThrow(
      String key);

  /**
   * <pre>
   * Expirty in Years
   * </pre>
   *
   * <code>int32 Expiry = 9;</code>
   * @return The expiry.
   */
  int getExpiry();

  /**
   * <pre>
   * DNSNames
   * </pre>
   *
   * <code>.model.StringArray DomainNames = 10;</code>
   * @return Whether the domainNames field is set.
   */
  boolean hasDomainNames();
  /**
   * <pre>
   * DNSNames
   * </pre>
   *
   * <code>.model.StringArray DomainNames = 10;</code>
   * @return The domainNames.
   */
  com.ai.procyon.grpc.common.StringArray getDomainNames();
  /**
   * <pre>
   * DNSNames
   * </pre>
   *
   * <code>.model.StringArray DomainNames = 10;</code>
   */
  com.ai.procyon.grpc.common.StringArrayOrBuilder getDomainNamesOrBuilder();

  /**
   * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
   * @return Whether the target field is set.
   */
  boolean hasTarget();
  /**
   * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
   * @return The target.
   */
  com.ai.procyon.grpc.common.ObjectRef getTarget();
  /**
   * <code>.model.ObjectRef target = 11 [(.gogoproto.nullable) = false];</code>
   */
  com.ai.procyon.grpc.common.ObjectRefOrBuilder getTargetOrBuilder();
}
